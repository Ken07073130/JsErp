using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;

public partial class htpsbEdit : System.Web.UI.Page {
    string lb = "";
    string bh = "";
    string editType = "";
    string bb = "";
    SqlConnection sqlcon = new SqlConnection(ConfigurationManager.ConnectionStrings["DatebaseConnection"].ConnectionString);
    SqlCommand Cmd;
    SqlDataReader sdr;
    protected void Page_Load(object sender, EventArgs e) {
        editType = Request.QueryString["editType"];
        bh = Request.QueryString["bh"];
        bb = Request.QueryString["bb"];
        lb = Request.QueryString["lb"];
        if (!IsPostBack) {
            if (Session["username"] != null) {
                tbUserName.Text = Session["username"].ToString();
                tbGroupName.Text = Session["groupnames"].ToString();
            }
            if ("ADD" == lb) {
                setDefault();//新增单据设置默认值
            }
            if ("EDIT" == lb.Trim() || "CHANGE" == lb.Trim()) {
                getData();
                //先获取最大版本，之后填充之前的版本,即假如当前版本为1.3  需要往列表里加上1.2 1.1 1.0
                if ("EDIT" == lb.Trim()) {
                    string curBB = ddlBB.Text;
                    sqlcon.Open();
                    string sqlstr = "select max(bb) maxbb from dbo.v_htpsb where bh='" + bh + "'";
                    Cmd = new SqlCommand(sqlstr, sqlcon);
                    double maxBB=Convert.ToDouble(Cmd.ExecuteScalar());
                    sqlcon.Close();
                    ddlBB.Items.Clear();
                    while (maxBB >= 0.95) {
                        ddlBB.Items.Add(maxBB.ToString("0.0"));
                        maxBB = maxBB - 0.1;
                    }
                    ddlBB.SelectedValue = curBB;
                }
                //变更设置
                if ("CHANGE" == lb.Trim()) {
                    if (editType.Equals("1")) { //editType不能传中文,用1替代编辑
                        editType = "编辑";
                    }
                    setChange();
                }
            }

        }
        controlEnable();

    }

    public void setDefault() {
        DateTime dt = DateTime.Now;
        tbBh.Text = "HT" + dt.ToString("yyyyMMddHHmmss");
        tbZbr.Text = Session["username"].ToString();
        tbJbrq.Text = dt.ToString("yyyy-MM-dd");
        ddlBB.Items.Add("1.0");
    }

    //变更相关设置
    public void setChange() {
        Double bb = Convert.ToDouble(ddlBB.Text.ToString());
        bb = bb + 0.1;//版本+0.1
        ddlBB.Items.Clear();
        ddlBB.Items.Add(bb.ToString());

        ddlPMCpsjg.SelectedIndex = 0;
        ddlPMChqzt.SelectedIndex = 1;

        ddlGcpsjg.SelectedIndex = 0;
        ddlGchqzt.SelectedIndex = 0;

        ddlPACKpsjg.SelectedIndex = 0;
        ddlPMChqzt.SelectedIndex = 0;

        ddlGylpsjg.SelectedIndex = 0;
        ddlGylhqzt.SelectedIndex = 0;

        ddlSbpsjg.SelectedIndex = 0;
        ddlSbhqzt.SelectedIndex = 0;

        ddlZlpsjg.SelectedIndex = 0;
        ddlZlhqzt.SelectedIndex = 0;

        ddlZzpsjg.SelectedIndex = 0;
        ddlZzhqzt.SelectedIndex = 0;

        ddlSczjpsjg.SelectedIndex = 0;
        ddlSczjhqzt.SelectedIndex = 0;

        ddlZgpsjg.SelectedIndex = 0;
        ddlZghqzt.SelectedIndex = 0;

        ddlSwjlpsjg.SelectedIndex = 0;
        ddlSwjlhqzt.SelectedIndex = 0;

    }

    //变更后执行日志操作
    public bool change() {
        bool result = false;
        string sqlstr = "js_sp_htpsb_history";
        sqlcon.Open();
        Cmd = new SqlCommand(sqlstr, sqlcon);
        Cmd.CommandType = CommandType.StoredProcedure;
        Cmd.Parameters.Add("@bh", SqlDbType.VarChar, 30);
        Cmd.Parameters.Add("@bb", SqlDbType.VarChar, 30);
        Cmd.Parameters.Add("@bgr", SqlDbType.VarChar, 30);
        Cmd.Parameters.Add("@bgsm", SqlDbType.VarChar, 30);
        Cmd.Parameters["@bh"].Value = tbBh.Text;
        Cmd.Parameters["@bb"].Value = ddlBB.Text;
        Cmd.Parameters["@bgsm"].Value = tbBgsm.Text;
        Cmd.Parameters["@bgr"].Value = Session["username"].ToString();
        Cmd.Parameters.Add("@errorMessage", SqlDbType.VarChar, 200);
        Cmd.Parameters["@errorMessage"].Direction = ParameterDirection.Output;
        SqlDataReader sdr = Cmd.ExecuteReader();
        sqlcon.Close();
        if (Cmd.Parameters["@errorMessage"].Value.Equals("Pass") ) {
            result = true;
           
        }
        else if (Cmd.Parameters["@errorMessage"].Value.Equals("Back")) {
            double preBB=Convert.ToDouble(ddlBB.Text) - 0.1;
            ddlBB.Items.Clear();
            ddlBB.Items.Add(preBB.ToString("0.0"));
            result = editData();
        }
        else {

            ClientScript.RegisterStartupScript(this.GetType(), "", "<script>alert('" + Cmd.Parameters["@errorMessage"].Value.ToString().Replace("'", "") + "')</script>");
        }
        sdr.Close();

        return result;
    }

    #region 增删改基本
    //判断控件的可编辑情况
    public void controlEnable() {
        sqlcon.Open();
        String sqlstr = "select lx,mc,case when '" + editType + "'='编辑' or '" + editType + "' = '' then dbo.js_func_hasgroup(djmc,'" + Session["UserName"] + "','',qx) else 0 end qx from dbo.js_controlEnable where djmc='合同评审表'";
        Cmd = new SqlCommand(sqlstr, sqlcon);
        sdr = Cmd.ExecuteReader();
        if (sdr.HasRows) {
            while (sdr.Read()) {
                if ("TEXTBOX" == sdr["lx"].ToString()) {
                    //((TextBox)FindControl(sdr["mc"].ToString().Trim())).Attributes.Add("readonly","1" == sdr["qx"].ToString()?"false":"true"); 
                    ((TextBox)FindControl(sdr["mc"].ToString().Trim())).ReadOnly = !("1" == sdr["qx"].ToString());
                }
                else if ("DROPDOWNLIST" == sdr["lx"].ToString())
                    ((DropDownList)FindControl(sdr["mc"].ToString().Trim())).Enabled = ("1" == sdr["qx"].ToString());
                else if ("CHECKBOX" == sdr["lx"].ToString())
                    ((CheckBox)FindControl(sdr["mc"].ToString().Trim())).Enabled = ("1" == sdr["qx"].ToString());
                else if ("CHECKBOXLIST" == sdr["lx"].ToString())
                    ((CheckBoxList)FindControl(sdr["mc"].ToString().Trim())).Enabled = ("1" == sdr["qx"].ToString());
            }
        }
        sqlcon.Close();
        sdr.Close();

        ddlBB.Enabled = true;

        if (editType != null && editType.Equals("查看")) {
            lbSubmit.Visible = false;
        }

        //当前会签人员着色
        if (tbGroupName.Text.IndexOf("合同评审表-PMC审核") > 0) {
            divPMChq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-工程部审核") > 0) {
            spanGchq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-设备部审核") > 0) {
            spanSbhq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-制造部审核") > 0) {
            spanZzhq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-质量审核") > 0) {
            spanZlhq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-PACK审核") > 0) {
            spanGchq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-供应链审核") > 0) {
            spanZlhq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-生产总监审核") > 0) {
            tbSczjbz.BackColor = System.Drawing.ColorTranslator.FromHtml("#FFFFCC");
            liSczjhq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-总工审核") > 0) {
            tbZgbz.BackColor = System.Drawing.ColorTranslator.FromHtml("#FFFFCC");
            liZghq.Style.Add("background-color", "#FFFFCC");
        } else if (tbGroupName.Text.IndexOf("合同评审表-商务经理审核") > 0) {
            tbSwjlbz.BackColor = System.Drawing.ColorTranslator.FromHtml("#FFFFCC");
            liSwjlhq.Style.Add("background-color", "#FFFFCC");
        }
       


    }


    //新增数据
    public Boolean addData() {
        sqlcon.Open();
        Boolean result = false;
        //根据数据库  前台控件和后台数据库字段对照来自动生成插入语句
        String addSQLSring = "";
        System.Text.StringBuilder zd = new System.Text.StringBuilder();
        System.Text.StringBuilder zdz = new System.Text.StringBuilder();
        String sqlstr = " select mc,zd,lx from dbo.js_controlEnable where djmc = '合同评审表' and charindex('发起人',qx)>0  ";
        Cmd = new SqlCommand(sqlstr, sqlcon);
        sdr = Cmd.ExecuteReader();
        if (sdr.HasRows) {
            while (sdr.Read()) {
                zd.Append(sdr["zd"].ToString());
                zd.Append(",");
                zdz.Append("'");
                if ("TEXTBOX" == sdr["lx"].ToString()) {
                    zdz.Append(((TextBox)FindControl(sdr["mc"].ToString().Trim())).Text);
                }
                else if ("CHECKBOX" == sdr["lx"].ToString()) {
                    zdz.Append(((CheckBox)FindControl(sdr["mc"].ToString().Trim())).Checked);
                }
                else if ("DROPDOWNLIST" == sdr["lx"].ToString()) {
                    zdz.Append(((DropDownList)FindControl(sdr["mc"].ToString().Trim())).SelectedValue);
                }
                else if ("CHECKBOXLIST" == sdr["lx"].ToString()) {
                    String strTemp = "";
                    CheckBoxList cblTemp = (CheckBoxList)FindControl(sdr["mc"].ToString().Trim());
                    for (int i = 0; i < cblTemp.Items.Count; i++) {
                        if (cblTemp.Items[i].Selected) {
                            strTemp = strTemp + cblTemp.Items[i].Text + ',';
                        }
                    }
                    zdz.Append(strTemp.Substring(0, strTemp.Length > 0 ? strTemp.Length : 1 - 1));//全部都没勾选时 空字符串 就substring(0,0)
                }

                zdz.Append("',");
            }
        }
        sdr.Close();



        addSQLSring = "insert into js_htpsbH (djlsh,"
                   + zd.ToString().Substring(0, zd.Length - 1)
                   + ") select isnull(max(djlsh),0)+1,"
                   + zdz.ToString().Substring(0, zdz.Length - 1) + " from js_htpsbH";
        Cmd = new SqlCommand(addSQLSring, sqlcon);
        Cmd.ExecuteNonQuery();
        sqlcon.Close();
        result = true;
        return result;
    }



    //获取数据
    public void getData() {
        sqlcon.Open();
        //Hash表:
        //ht_zddz 字段对照 存储 前台控件和后台字段名对应关系  KEY:数据库字段名 VALUE:控件名称
        //ht_lxdz 类型对照 前台控件和控件类型对照  KEY:数据库字段名 VALUE：控件类型
        Hashtable ht_zddz = new Hashtable();
        Hashtable ht_lxdz = new Hashtable();
        //ArrayList 存储后台数据库字段名字的列表
        ArrayList listZd = new ArrayList();
        String sqlstr = "select mc,zd,lx from dbo.js_controlEnable where djmc = '合同评审表'  ";
        Cmd = new SqlCommand(sqlstr, sqlcon);
        sdr = Cmd.ExecuteReader();
        if (sdr.HasRows) {
            while (sdr.Read()) {
                listZd.Add(sdr["zd"].ToString().Trim());//将数据库字段名加入list
                ht_zddz.Add(sdr["zd"].ToString().Trim(), sdr["mc"].ToString().Trim());
                ht_lxdz.Add(sdr["zd"].ToString().Trim(), sdr["lx"].ToString().Trim());
            }
        }
        sdr.Close();
        sqlstr = "select * from v_htpsb where bh='" + bh + "' and bb='"+bb+"'";
        Cmd = new SqlCommand(sqlstr, sqlcon);
        sdr = Cmd.ExecuteReader();
        if (sdr.HasRows) {
            while (sdr.Read()) {//获取数据时，只有一条数据
                //循环表的所有数据库字段
                foreach (String strZd in listZd) {
                    if ("TEXTBOX" == (string)ht_lxdz[strZd]) {//根据对照表存储的字段类型进行不同类型的转换
                        ((TextBox)FindControl((string)ht_zddz[strZd])).Text = sdr[strZd].ToString().Trim();
                    }
                    else if ("CHECKBOX" == (string)ht_lxdz[strZd]) {
                        ((CheckBox)FindControl((string)ht_zddz[strZd])).Checked = ("True" == sdr[strZd].ToString());
                    }
                    else if ("DROPDOWNLIST" == (string)ht_lxdz[strZd]) {
                        DropDownList ddlTemp = (DropDownList)FindControl((string)ht_zddz[strZd]);
                        int j = 0;
                        for (int i = 0; i < ddlTemp.Items.Count; i++) {
                            if (ddlTemp.Items[i].Value == sdr[strZd].ToString().Trim()) {
                                j = i;//把匹配到的索引赋给j
                                break;
                            }
                        }
                        if (0 == j) { //j=0说明数据库里的值没有匹配到，那么就自己把数据库的值加进去并选定
                            ddlTemp.Items.Add(sdr[strZd].ToString().Trim());
                        }
                        // ddlTemp.Text = sdr[strZd].ToString().Trim();
                        ddlTemp.SelectedValue = sdr[strZd].ToString().Trim();
                    }
                    else if ("CHECKBOXLIST" == (string)ht_lxdz[strZd]) {
                        CheckBoxList cblTemp = (CheckBoxList)FindControl((string)ht_zddz[strZd]);
                        //获取的值一一去匹配CHECKBOXLIST的值，若匹配上 则打勾
                        for (int i = 0; i < cblTemp.Items.Count; i++) {
                            if (sdr[strZd].ToString().Trim().IndexOf(cblTemp.Items[i].Text) != -1) {
                                cblTemp.Items[i].Selected = true;
                            }
                        }
                    }

                }
            }
        }
        sdr.Close();
        sqlcon.Close();
    }


    //更新数据
    public Boolean editData() {
        Boolean result = false;
        //根据数据库  前台控件和后台数据库字段对照来自动生成插入语句
        String editSQLSring = "";
        System.Text.StringBuilder editEqualSql = new System.Text.StringBuilder();
        sqlcon.Open();
        String sqlstr = " select  mc,lx,zd from   dbo.js_controlEnable where   djmc = '合同评审表' "
                      + " and dbo.js_func_hasgroup('合同评审表','" + Session["UserName"] + "','',qx)=1 ";
        Cmd = new SqlCommand(sqlstr, sqlcon);
        sdr = Cmd.ExecuteReader();
        if (sdr.HasRows) {
            while (sdr.Read()) {
                editEqualSql.Append(sdr["zd"].ToString());
                editEqualSql.Append("='");
                if ("TEXTBOX" == sdr["lx"].ToString()) {
                    editEqualSql.Append(((TextBox)FindControl(sdr["mc"].ToString().Trim())).Text);
                }
                else if ("CHECKBOX" == sdr["lx"].ToString()) {
                    editEqualSql.Append(((CheckBox)FindControl(sdr["mc"].ToString().Trim())).Checked);
                }
                else if ("DROPDOWNLIST" == sdr["lx"].ToString()) {
                    editEqualSql.Append(((DropDownList)FindControl(sdr["mc"].ToString().Trim())).SelectedValue);
                }
                else if ("CHECKBOXLIST" == sdr["lx"].ToString()) {
                    String strTemp = "";
                    CheckBoxList cblTemp = (CheckBoxList)FindControl(sdr["mc"].ToString().Trim());
                    for (int i = 0; i < cblTemp.Items.Count; i++) {
                        if (cblTemp.Items[i].Selected) {
                            strTemp = strTemp + cblTemp.Items[i].Text + ',';
                        }
                    }
                    editEqualSql.Append(strTemp.Substring(0, strTemp.Length > 0 ? strTemp.Length : 1 - 1));
                }
                editEqualSql.Append("',");

            }
        }
        editSQLSring = "update js_htpsbH set "
                   + editEqualSql.ToString().Substring(0, editEqualSql.Length - 1)
                   + " where bh='" + bh + "'";
        sdr.Close();
        Cmd = new SqlCommand(editSQLSring, sqlcon);
        Cmd.ExecuteNonQuery();
        sqlcon.Close();

        result = true;
        return result;

    }
    #endregion

    protected void lbSubmit_Click(object sender, EventArgs e) {
        if (Page.IsValid) {
            if ("ADD" == lb || "COPY" == lb) {
                if (addData()) {
                    Response.Redirect("htpsbList.aspx");
                }
            }
            else if ("EDIT" == lb) {
                if (editData()) { //编辑数据成功后
                    Response.Redirect("htpsbList.aspx");
                }
            }
            //合同变更
            else if ("CHANGE" == lb) {
                if (addData()) {
                    if (change()) {
                        Response.Redirect("htpsbList.aspx");
                    }
                }

            }

        }
    }

    //
    protected void CustomValidator1_ServerValidate(object source, ServerValidateEventArgs args) {
        //非订单拆分的单子，不能有重复的 客户订单号+客户型号+规格书编号+规格书版本
        if (ddlDdcf.Text.Equals("否")) {
            sqlcon.Open();
            string sqlstr = " select count(*) from js_htpsbH where khddh='" + tbKhddh.Text + "' and KHXH='" + tbKhxh.Text + "' and ggsbh='" + tbGgsbh.Text + "' and ggsbb='" + tbGgsbb.Text + "' and ddcf='否' ";
            Cmd = new SqlCommand(sqlstr, sqlcon);
            int count = Convert.ToInt32(Cmd.ExecuteScalar());
            if (count == 1 && lb == "ADD") {
                args.IsValid = false;
            }
            else if (count >= 2 && lb != "ADD") {
                args.IsValid = false;
            }
            else {
                args.IsValid = true;
            }
            sqlcon.Close();
        }
    }

    //订单拆分
    protected void ddlDdcf_SelectedIndexChanged(object sender, EventArgs e) {
        if (ddlDdcf.Text.Equals("是")) {
            string curBH = tbBh.Text;
            string curDdsl = tbDdsl.Text;
            ddlDdcf.SelectedValue = "否";
            tbBh.Text = tbBh.Text = "HT" + DateTime.Now.ToString("yyyyMMddHHmmss");
            //拆分数量默认0，让其后面去做
            tbDdsl.Text = "0";
            if (addData()) { 
                //赋回原值
                tbBh.Text = curBH;
                tbDdsl.Text = curDdsl;
                ddlDdcf.SelectedValue = "是";
            }
        }
    }

    //版本查看
    protected void ddlBB_SelectedIndexChanged(object sender, EventArgs e) {
        Response.Redirect("htpsbEdit.aspx?bh=" +  tbBh.Text+ " &bb="+ddlBB.Text +"&lb=EDIT&editType=全部");
    }
}
